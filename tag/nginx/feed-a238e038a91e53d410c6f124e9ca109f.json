{
    "version": "https://jsonfeed.org/version/1",
    "title": "Qualityology - Let's get the most out of life! â€¢ All posts by \"nginx\" tag",
    "description": "To uncover the best way to achieve desired level of quality in everything. - We dive deep on adding quality to tech gadgets, business, and entertainment because quality matter in life.",
    "home_page_url": "https://www.qualityology.com",
    "items": [
        {
            "id": "https://www.qualityology.com/tech/stop-automated-comment-spam-brute-force-login-attack/",
            "url": "https://www.qualityology.com/tech/stop-automated-comment-spam-brute-force-login-attack/",
            "title": "Protect your WordPress from Automated Comment Spam and Brute Force Login Attack",
            "date_published": "2018-04-12T23:57:49.000Z",
            "content_html": "<p>Is your WordPress flooded with spam comment or being attacked by brute force login attempt? Thinking about spam blocking plugin? There are a lot of plug in can help you stop spam comment. You will notice it put thousands spam comments into spam folder after a while. Those Anti-Spam did a great job stopping spam comment show up in our post. There is some drawbacks for that kind of plugin. First,spam comments will be processed and store in your database before it gets deleted manually or automatically. Second, plugin like Akismet Anti-Spam will add a java-script to your site. If your site has limited resources, these kind of activities will drag down your site&#x2019;s performance. If you use captcha plugin, you will also interrupt user&#x2019;s experience.</p>\n<p>If you are looking for a light way to block the spam bot before the comment get posted. Yes, we have one. We can block the spam bot and also protect your login page at the same time, Spam bots&#x2019; comments will not even reach the server. Unless you got hit with spam from real human. This method is almost perfect and very light to your server. It has no captcha, no moderation queues, no complicate settings page, and 99.99% filter rate. This idea is inspired by this <a href=\"https://www.rtcx.net/stop-automated-comment-spam-wordpress\">Stop Automated Comment Spam on WordPress with Nginx.</a> <strong>How this work?</strong> Most spam bot will not process contents from server, including js and cookies. Their job is to get the comment form and post. So we can use java-script and cookies to block spam bot when they try to post any word.</p>\n<ul>\n<li>  When post is viewed, browser will set a small cookie named _pass into viewer&#x2019;s system.</li>\n<li>  If viewer attempted to post a comment, Nginx or Apache will check if they have that cookie in their system. Comment will go through if cookie found. Otherwise, it will shows 403 to block the access.</li>\n<li>  Since the cookie is set no matter viewer is attempt to leave comment or not, we can use the same cookie to prevent brute force login attack. Most spam bot and attack tools are not able to store cookie so the same theory work for both.</li>\n</ul>\n<p><strong>What you need?</strong></p>\n<ul>\n<li>  Access to server&#x2019;s configuration file.&#xA0;(Nginx or Apache&#x2019;s config file)</li>\n<li>  Ability to change something.</li>\n</ul>\n<h2 id=\"Step-one-add-code-to-set-cookie\"><a href=\"#Step-one-add-code-to-set-cookie\" class=\"headerlink\" title=\"Step one, add code to set cookie.\"></a>Step one, add code to set cookie.</h2><p>You can add below code via Code Snippets or directly to theme&#x2019;s function.php file. For HTTPS:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function set_post_cookie() {</span><br><span class=\"line\">echo &apos;&lt;script&gt;document.cookie = &quot;_pass=1; max-age=43200; path=/; secure&quot;;&lt;/script&gt;&apos; . &quot;n&quot;; </span><br><span class=\"line\">}</span><br><span class=\"line\">add_action( &apos;comment_form&apos;, &apos;set_post_cookie&apos;, 100 );</span><br></pre></td></tr></table></figure>\n<p>This will set a cookie &#x201C;human&#x201D; and value is &#x201C;1&#x201D;. You can change the cookie name and value to whatever you want. If you use HTTP, remove the the work secure from above code.</p>\n<h2 id=\"Step-two-add-below-code-to-check-and-block-spam-bot-with-Nginx-Apache\"><a href=\"#Step-two-add-below-code-to-check-and-block-spam-bot-with-Nginx-Apache\" class=\"headerlink\" title=\"Step two, add below code to check and block spam bot with Nginx/Apache\"></a>Step two, add below code to check and block spam bot with Nginx/Apache</h2><p><strong>For NGINX:</strong></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Stop Automated Comment Spam and log in attempt with Nginx</span><br><span class=\"line\">if ($request_uri ~* /wp.comments.post.php/wp-login.php) { set $block_flag 1; }</span><br><span class=\"line\">if ($http_cookie ~* _pass) { set $block_flag 0; }</span><br><span class=\"line\">if ($block_flag) {</span><br><span class=\"line\">        return 403;</span><br><span class=\"line\">    }</span><br></pre></td></tr></table></figure>\n<p><strong>For Apache:</strong></p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteCond %{REQUEST_URI} ^/wp.comments.post.php?$ [OR]</span><br><span class=\"line\">RewriteCond %{REQUEST_URI} ^(.*)?wp-login\\.php(.*)$</span><br><span class=\"line\">RewriteCond %{HTTP_COOKIE} !_pass</span><br><span class=\"line\">RewriteRule ^forbid/(.*)$ - [F]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-three-reset-the-cookie-for-failed-login-attempt\"><a href=\"#Step-three-reset-the-cookie-for-failed-login-attempt\" class=\"headerlink\" title=\"Step three, reset the cookie for failed login attempt\"></a>Step three, reset the cookie for failed login attempt</h2><p>Every time incorrect login attempted cookie will be remove to prevent brute force login attack. Add below codes to functions.php of your theme</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function no_wordpress_errors(){</span><br><span class=\"line\">echo &apos;&lt;script&gt;document.cookie = &quot;_pass=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure&quot;;&lt;/script&gt;&apos; . &quot;&quot;;</span><br><span class=\"line\">$ip=$_SERVER[&apos;REMOTE_ADDR&apos;];</span><br><span class=\"line\">$message = &quot;Your are blocked. IP address $ip&quot;;</span><br><span class=\"line\">return $message;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">add_filter( &apos;login_errors&apos;, &apos;no_wordpress_errors&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScript-must-be-turned-on-and-browser-must-accept-cookie-for-this-system-to-work\"><a href=\"#JavaScript-must-be-turned-on-and-browser-must-accept-cookie-for-this-system-to-work\" class=\"headerlink\" title=\"JavaScript must be turned on and browser must accept cookie for this system to work.\"></a>JavaScript must be turned on and browser must accept cookie for this system to work.</h3><p>Remember! Next time when you try to login your admin page, open a post first so you will have the cookie and will not be blocked by this.</p>\n",
            "tags": [
                "WordPress",
                "Apache",
                "Nginx"
            ]
        },
        {
            "id": "https://www.qualityology.com/tech/build-extremely-fast-wordpress-gcp-part-2-nginx/",
            "url": "https://www.qualityology.com/tech/build-extremely-fast-wordpress-gcp-part-2-nginx/",
            "title": "Build an extremely fast WordPress with GCP Part 2: Nginx",
            "date_published": "2017-10-01T05:11:32.000Z",
            "content_html": "<p>Apache or Nginx, what softwares should be used to for your server to achieve the maximum performance? If you have a small free server from GCP from <a href=\"https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/\">part 1</a>, and you want it to be able to handle average 1000 clients per second, Nginx is the best option. Apache use more server resources and must be configured properly to get the best performance. Nginx can handle very large amount of traffic even in a limited environment. We have done the loading test with the server from Google Cloud Platform from <a href=\"https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/\">part 1</a>&#xA0;and the result was great without deep optimization. 1000 client/sec is not the maximum that this setup can get, it is the limit of the free test we could get. <img src=\"/2017/09/loading-test-result-28bbf2cfcf185cb53e2eba4440a4ca31.png\"> When we tried the same test using Apache, the test was aborted at the beginning because server crashed. That is why we will use Nginx. We are not the server expert, so we will not discuss how to optimize Apache to pass the same test. What we will need is NGINX + MySQL + PHP-FPM +&#xA0;Microcaching + WordPress.</p>\n<h2 id=\"Step-1-install-Nginx\"><a href=\"#Step-1-install-Nginx\" class=\"headerlink\" title=\"Step 1, install Nginx.\"></a>Step 1, install Nginx.</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\">sudo apt-get install nginx -y</span><br><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-2-install-Mysql-or-MariaDB\"><a href=\"#Step-2-install-Mysql-or-MariaDB\" class=\"headerlink\" title=\"Step 2, install Mysql (or MariaDB).\"></a>Step 2, install Mysql (or MariaDB).</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server -y</span><br><span class=\"line\">sudo service mysql stop</span><br><span class=\"line\">sudo mysql_install_db # follow instructions</span><br><span class=\"line\">sudo service mysql start</span><br><span class=\"line\">sudo mysql_secure_installation # follow instructions</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-3-install-Install-PHP-FPM\"><a href=\"#Step-3-install-Install-PHP-FPM\" class=\"headerlink\" title=\"Step 3, install Install PHP-FPM\"></a>Step 3, install Install PHP-FPM</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php-fpm php-mysql php-gd php-cli php-xml php-mbstring</span><br></pre></td></tr></table></figure>\n<p>Add cgi.fix_pathinfo=0 to php.ini, if you know how to add, jump to step 4, otherwise, continue below.</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># if you use different version of PHP, change 7.0 to your version e.g. 8.0</span><br><span class=\"line\">sudo nano /etc/php/7.0/fpm/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\"># paste cgi.fix_pathinfo=0</span><br><span class=\"line\"># press ctrl + X key, and type Y to save the file.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># restart PHP-FPM service</span><br><span class=\"line\"># if you use different version of PHP, change the 7.0 accordingly</span><br><span class=\"line\">sudo service php7.0-fpm restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-configure-Nginx-to-use-PHP-FPM-to-process-php-files\"><a href=\"#Step-4-configure-Nginx-to-use-PHP-FPM-to-process-php-files\" class=\"headerlink\" title=\"Step 4, configure Nginx to use PHP-FPM to process php files\"></a>Step 4, configure Nginx to use PHP-FPM to process php files</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/nginx/sites-available/default</span><br><span class=\"line\"></span><br><span class=\"line\"># add the following to the server { } block</span><br><span class=\"line\"></span><br><span class=\"line\">                location ~ \\.php$ {</span><br><span class=\"line\">                try_files $uri =404;</span><br><span class=\"line\">                fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">                fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</span><br><span class=\"line\">                fastcgi_index index.php;</span><br><span class=\"line\">                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">                include fastcgi_params;</span><br><span class=\"line\">                        }</span><br></pre></td></tr></table></figure>\n<p>Restart Nginx</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-5-add-Microcaching-to-Nginx\"><a href=\"#Step-5-add-Microcaching-to-Nginx\" class=\"headerlink\" title=\"Step 5, add Microcaching to Nginx\"></a>Step 5, add Microcaching to Nginx</h2><p>With Microcaching, Nginx can handle large amount of traffic because dynamic inquiries/files are cached to prevent overloading your database. For example if each client to your website generate 2 database inquiry, 1000 client will have 2000 inquires. If you set up cache for 5 seconds, 1000 clients within 5 seconds will only hit your database 2 times if both inquires are cached. That is the magic of this setup.</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># always backup the file you want to change</span><br><span class=\"line\">sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak</span><br><span class=\"line\">sudo nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<p>Add the following to the file. You can add this before the server {} block</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Microcaching</span><br><span class=\"line\">fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=qualityology-com:100m inactive=60m;</span><br><span class=\"line\">fastcgi_cache_key &quot;$scheme$request_method$host$request_uri&quot;;</span><br></pre></td></tr></table></figure>\n<p>Add the following to location ~ \\.php$ {} block. Below configuration will set the cache to expire after 10 seconds, and no cache for logged in users and commenters. You can change the 10s to longer time, but 10s is long enough for your need.</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Cache everything by default</span><br><span class=\"line\">set $no_cache 0;</span><br><span class=\"line\"></span><br><span class=\"line\">#Don&apos;t cache logged in users or commenters</span><br><span class=\"line\">if ( $http_cookie ~* &quot;comment_author_wordpress_(?!test_cookie)wp-postpass_&quot; ) {</span><br><span class=\"line\">        set $no_cache 1;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">#Don&apos;t cache the following URLs</span><br><span class=\"line\">if ($request_uri ~* &quot;/(wp-admin/wp-login.php)&quot;)</span><br><span class=\"line\">{</span><br><span class=\"line\">        set $no_cache 1;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">#matches keys_zone in fastcgi_cache_path</span><br><span class=\"line\">fastcgi_cache qualityology-com;</span><br><span class=\"line\"></span><br><span class=\"line\">#don&apos;t serve pages defined earlier</span><br><span class=\"line\">fastcgi_cache_bypass $no_cache;</span><br><span class=\"line\"></span><br><span class=\"line\">#don&apos;t cache pages defined earlier</span><br><span class=\"line\">fastcgi_no_cache $no_cache;</span><br><span class=\"line\"></span><br><span class=\"line\">#defines the default cache time</span><br><span class=\"line\">fastcgi_cache_valid any 10s;</span><br><span class=\"line\"></span><br><span class=\"line\">#unsure what the impacts of this variable is</span><br><span class=\"line\">fastcgi_max_temp_file_size 2M;</span><br><span class=\"line\"></span><br><span class=\"line\">#Use stale cache items while updating in the background</span><br><span class=\"line\">fastcgi_cache_use_stale updating error timeout invalid_header http_500;</span><br><span class=\"line\">fastcgi_cache_lock on;</span><br><span class=\"line\">fastcgi_cache_lock_timeout 10s;</span><br></pre></td></tr></table></figure>\n<p>Test if your configuration</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n<p>If no error, reload your Nginx or restart it</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-6-install-WordPress\"><a href=\"#Step-6-install-WordPress\" class=\"headerlink\" title=\"Step 6, install WordPress\"></a>Step 6, install WordPress</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/www/html/</span><br><span class=\"line\">sudo wget http://wordpress.org/latest.tar.gz</span><br><span class=\"line\">sudo tar xzvf latest.tar.gz</span><br><span class=\"line\">sudo rm latest.tar.gz</span><br><span class=\"line\">sudo mv wordpress/* ./</span><br><span class=\"line\">sudo chown -R www-data:www-data /var/www/html/*</span><br></pre></td></tr></table></figure>\n<p>You are all set. Now, open your domain or IP to setup WordPress</p>\n",
            "tags": [
                "WordPress",
                "Nginx",
                "Server"
            ]
        },
        {
            "id": "https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/",
            "url": "https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/",
            "title": "Build an extremely fast WordPress with GCP Part 1: server",
            "date_published": "2017-09-18T04:16:14.000Z",
            "content_html": "<p>Can you get a super fast server free from Google? Yes, you can. Google Cloud Platform has free tier for US region server. If you are building a small WordPress website using light bandwidth, the free tier is more than sufficient. Free tier provide 720 hours of instance usage which will cover whole month of usage. The only downside is if your site use a lot of bandwidth you will be billed after 1GB of free egress bandwidth, but still cheap because 1 GB cost only&#xA0;$0.01 for US and 1 TB $0.12 - $0.23 depends on the regions. Most new sites use only small amount of bandwidth. Ingress is free if you wonder. As of today, the free tier offer:</p>\n<blockquote>\n<ul>\n<li>  1 f1-micro instance per month (US regions only - Excluding Northern Virginia)</li>\n<li>  30 GB-months HDD, 5 GB-months snapshot</li>\n<li>  1 GB network egress from North America to all region destinations per month (excluding China and Australia)</li>\n</ul>\n</blockquote>\n<h2 id=\"Step-1-update-your-billing-info\"><a href=\"#Step-1-update-your-billing-info\" class=\"headerlink\" title=\"Step 1, update your billing info.\"></a>Step 1, update your billing info.</h2><p>Open <a href=\"https://console.cloud.google.com/billing\">https://console.cloud.google.com/billing</a>, update your billing info. You may be requested to create a project name.</p>\n<h2 id=\"Step-2-create-your-virtual-server-instance\"><a href=\"#Step-2-create-your-virtual-server-instance\" class=\"headerlink\" title=\"Step 2, create your virtual server (instance)\"></a>Step 2, create your virtual server (instance)</h2><p>Open <a href=\"https://console.cloud.google.com/compute\">https://console.cloud.google.com/compute</a> and click CREATE INSTANCE. <img src=\"/2017/09/create_instance-b838d66311ba7559ae40ad101f3b8bc2.png\"></p>\n<h2 id=\"Step-3-configure-your-server\"><a href=\"#Step-3-configure-your-server\" class=\"headerlink\" title=\"Step 3, configure&#xA0;your server.\"></a>Step 3, configure&#xA0;your server.</h2><p>Match the free tier configuration, do not click create&#xA0;yet after this step.</p>\n<ul>\n<li>  <strong>Zone</strong>: pick a US region. eg: us-west1-a</li>\n<li>  <strong>Machine type</strong>: micro (1 shared vCPU, 0.6 GB memory, f1-micro)</li>\n<li>  <strong>Boot disk</strong>: 30 GB standard persistent disk. SSD is not free!</li>\n<li>  <strong>OS images</strong>: pick one of your favor, or use&#xA0;Debian GNU/Linux 9 (stretch) as what we picked.</li>\n<li>  <strong>Firewall</strong>: check Allow HTTP traffic and Allow HTTPS traffic</li>\n</ul>\n<h2 id=\"Step-4-get-an-static-IP-for-your-instance\"><a href=\"#Step-4-get-an-static-IP-for-your-instance\" class=\"headerlink\" title=\"Step 4: get an static IP for your instance.\"></a>Step 4: get an static IP for your instance.</h2><p>Expand&#xA0;Management, disks, networking, SSH keys <img src=\"https://www.qualityology.com/2017/09/instance_config_micro-c43f1252c0868e29e21c7ae503c68747.png\"> Under Networking &gt;&gt; Network interfaces &gt;&gt; External IP, select Create IP address <img src=\"/2017/09/instance_static_ip-2dbd3c23a2bbbdf99ead0fdc9283e895.png\"> After you reserve an static external IP address, you can click Create to finish the instance setup. You have complete the step 1 and you have your&#xA0;free server from GCP, continue to <a href=\"https://www.qualityology.com/tech/build-extremely-fast-wordpress-gcp-part-2-nginx/\">part 2</a> when you ready.</p>\n",
            "tags": [
                "WordPress",
                "Nginx",
                "Server"
            ]
        }
    ]
}