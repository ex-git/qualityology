{
    "version": "https://jsonfeed.org/version/1",
    "title": "Qualityology - Let's get the most out of life! â€¢ All posts by \"server\" tag",
    "description": "To uncover the best way to achieve desired level of quality in everything. - We dive deep on adding quality to tech gadgets, business, and entertainment because quality matter in life.",
    "home_page_url": "https://www.qualityology.com",
    "items": [
        {
            "id": "https://www.qualityology.com/tech/connect-to-existing-aws-appsync-api-from-a-react-application/",
            "url": "https://www.qualityology.com/tech/connect-to-existing-aws-appsync-api-from-a-react-application/",
            "title": "Connect to existing AWS AppSync API from a React Application",
            "date_published": "2021-02-27T04:53:22.000Z",
            "content_html": "<p>Have an existing API within AWS AppSync and need to connect it from a React web application? If you are not completely new to GraphQL you should know that the most popular GraphQL client is Apollo. </p>\n<p>There are many different way to connect to AWS AppSync with React, using different packages. Some required more packages/dependencies. </p>\n<p><img src=\"/2021/aws_appsync-454f19f14c5e39c24085368ae052e216.jpeg\" alt=\"aws_appsync\"></p>\n<h2 id=\"1-Use-Apollo-client\"><a href=\"#1-Use-Apollo-client\" class=\"headerlink\" title=\"1. Use Apollo client\"></a>1. Use Apollo client</h2><p>The latest version <code>@apollo/client</code> can handle AWS AppSync&#x2019;s query and mutation just fine with simple setup and also support React hook out of the box. Per their official doc, they will only support <code>useQuery</code> for query and <code>useMutation</code> for mutation hooks in their future release. Component based query and mutation will still work but will not be supported. However, for subscription, <code>@apollo/client</code> and AWS AppSync API won&#x2019;t work without complex setup because AppSync&#x2019;s subscriptions use MQTT as the transport layer, but <code>@apollo/client</code> support WebSockets.</p>\n<p>If you are using React with version that support hook, and you don&#x2019;t have the need for subscription, this option will work very well.</p>\n<ol>\n<li>Install required package<br><code>yarn add @apollo/client aws-appsync-auth-link</code></li>\n<li>Create client.js with following setup. <code>aws-exports</code> is the config download from your AWS AppSync API</li>\n</ol>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> {</span><br><span class=\"line\">    ApolloClient, ApolloLink, InMemoryCache, createHttpLink,</span><br><span class=\"line\">} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;@apollo/client&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { createAuthLink } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;aws-appsync-auth-link&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> AppSyncConfig <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./aws-exports&apos;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> url = AppSyncConfig.aws_appsync_graphqlEndpoint;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> region = AppSyncConfig.aws_project_region;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> auth = {</span><br><span class=\"line\">    type: AppSyncConfig.aws_appsync_authenticationType,</span><br><span class=\"line\">    apiKey: AppSyncConfig.aws_appsync_apiKey,</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> link = ApolloLink.from([</span><br><span class=\"line\">    <span class=\"hljs-comment\">// @ts-ignore</span></span><br><span class=\"line\">    createAuthLink({ url, region, auth }),</span><br><span class=\"line\">    <span class=\"hljs-comment\">// @ts-ignore</span></span><br><span class=\"line\">    createHttpLink({ <span class=\"hljs-attr\">uri</span>: url }),</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> ApolloClient({</span><br><span class=\"line\">    link,</span><br><span class=\"line\">    cache: <span class=\"hljs-keyword\">new</span> InMemoryCache(),</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> client;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>In your <code>index.js</code> add below code to Apollo client accessible.<br><code>ApolloProvider</code> will make your AppSync client accessable any child of the entry point component whic is App in this example.</li>\n</ol>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { ApolloProvider } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;@apollo/client&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> client <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./graphQL/client&apos;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ApolloProvider client={client}&gt;</span><br><span class=\"line\">&lt;App /&gt;</span><br><span class=\"line\">&lt;/ApolloProvider&gt;</span><br></pre></td></tr></table></figure>\n<p>Example of making a mutation call:</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> {</span><br><span class=\"line\">\tuseMutation,</span><br><span class=\"line\">  gql</span><br><span class=\"line\">} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;@apollo/client&apos;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> createTodo = gql<span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  mutation CreateTodo(</span></span><br><span class=\"line\"><span class=\"hljs-string\">      item: String!</span></span><br><span class=\"line\"><span class=\"hljs-string\">    ) {</span></span><br><span class=\"line\"><span class=\"hljs-string\">    createUpdateMonitor(input: {</span></span><br><span class=\"line\"><span class=\"hljs-string\">      item: item</span></span><br><span class=\"line\"><span class=\"hljs-string\">    }) {</span></span><br><span class=\"line\"><span class=\"hljs-string\">        item</span></span><br><span class=\"line\"><span class=\"hljs-string\">    }</span></span><br><span class=\"line\"><span class=\"hljs-string\">  }</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> [createTodoMutation] = useMutation(createTodo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> handleCreateTodoClick = <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> todo = {</span><br><span class=\"line\">          item: <span class=\"hljs-string\">&apos;visit qualityology.com&apos;</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">        createTodoMutation({</span><br><span class=\"line\">            variables: todo,</span><br><span class=\"line\">        })</span><br><span class=\"line\">            .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;Todo created successfully&apos;</span>))</span><br><span class=\"line\">            .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {</span><br><span class=\"line\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;Error occurred&apos;</span>);</span><br><span class=\"line\">                <span class=\"hljs-built_in\">console</span>.log(err);</span><br><span class=\"line\">            });</span><br><span class=\"line\">    };</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-Use-AWS-AppSync-JavaScript-SDK\"><a href=\"#2-Use-AWS-AppSync-JavaScript-SDK\" class=\"headerlink\" title=\"2. Use AWS AppSync JavaScript SDK\"></a>2. Use AWS AppSync JavaScript SDK</h2><p>This SDK can be used with <code>apollo-client</code> and it is the offical SDK provided by AWS Labs. It support offline feature and also work with class components. Your <code>index.js</code> will need to be setup with the following code. You will need to download <code>aws-exports.js</code> from your AWS AppSync API and install <code>react-apollo aws-appsync-react</code> for this setup. ``aws-exports.js` contains the GraphQL endpoint url and your AWS AppSync API region, auth type info. </p>\n<p><code>new AWSAppSyncClient</code> will create a new AppSync client and store it in the <code>client</code> variable.<br><code>ApolloProvider</code> will make your AppSync client accessible any child of the entry point component whic is App in this example.</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> AWSAppSyncClient <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;aws-appsync&apos;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;react&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;react-dom&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> AppSyncConfig <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./aws-exports&apos;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { ApolloProvider } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;react-apollo&apos;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { Rehydrated } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;aws-appsync-react&apos;</span> <span class=\"hljs-comment\">// this needs to also be installed when working with React</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./App&apos;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> AWSAppSyncClient({</span><br><span class=\"line\">  url: AppSyncConfig.graphqlEndpoint,</span><br><span class=\"line\">  region: AppSyncConfig.region,</span><br><span class=\"line\">  auth: {</span><br><span class=\"line\">    type: AppSyncConfig.authenticationType,</span><br><span class=\"line\">    apiKey: AppSyncConfig.apiKey,</span><br><span class=\"line\">    <span class=\"hljs-comment\">// jwtToken: async () =&gt; token, // Required when you use Cognito UserPools OR OpenID Connect. token object is obtained previously</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> WithProvider = <span class=\"hljs-function\">() =&gt;</span> (</span><br><span class=\"line\">  &lt;ApolloProvider client={client}&gt;</span><br><span class=\"line\">    &lt;Rehydrated&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;/Rehydrated&gt;</span><br><span class=\"line\">  &lt;/ApolloProvider&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WithProvider</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&apos;root&apos;</span>));</span><br></pre></td></tr></table></figure>\n<p><code>Rehydrate</code> will make sure application cache has been read and is ready to use before rendering the app. If app is not ready, it will show the default <code>loading</code> text. If you want to confured the display text, you can call the render function as below.</p>\n<figure class=\"highlight jsx hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Rehydrated</span><br><span class=\"line\">  render={<span class=\"hljs-function\">(<span class=\"hljs-params\">{ rehydrated }</span>) =&gt;</span> (</span><br><span class=\"line\">    rehydrated ? <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span> : <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Fancy loading function here!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )}</span><br><span class=\"line\"> /&gt;</span><br></pre></td></tr></table></figure>\n<p>This method didn&#x2019;t work with out test application because it always show loading so it is not recommended to use unless you want to try it with a good reason. You can get more configuration from the project page <a href=\"https://github.com/awslabs/aws-mobile-appsync-sdk-js\">here</a>. </p>\n<h2 id=\"3-Use-AWS-Amplify\"><a href=\"#3-Use-AWS-Amplify\" class=\"headerlink\" title=\"3. Use AWS Amplify\"></a>3. Use AWS Amplify</h2><p>This is the easiest and with complete support of query, mutation, and subscription for AWS AppSync API. You will need your AWS AppSync API ID and the config export for this method. It can be found in AWS console.</p>\n<ol>\n<li><p>Install AWS Amplify cli. </p>\n<p><code>npm install -g @aws-amplify/cli</code></p>\n<p>The cli is needed for importing API</p>\n</li>\n<li><p>Navigate to your React project root folder.<br><code>amplify init</code></p>\n</li>\n<li><p>Add the codegen category to your React project.<br> `amplify add codegen &#x2013;apiId YOUR_API_ID_HERE</p>\n</li>\n<li><p>Generate client code.<br><code>amplify codegen</code><br>Follow the steps in your terminal. </p>\n</li>\n<li><p>Add <code>aws-amplify</code><br> <code>npm install aws-amplify</code> or  <code>yarn add aws-amplify</code></p>\n</li>\n<li><p>Add below code to your React application root <code>index.js</code></p>\n</li>\n</ol>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { Amplify } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;aws-amplify&apos;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// some imports here</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { Amplify } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;aws-amplify&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> amplifyConfig <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./aws-exports&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-comment\">// after all the imports</span></span><br><span class=\"line\"></span><br><span class=\"line\">Amplify.configure(amplifyConfig);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// the rest of the code, ReactDOM etc.</span></span><br></pre></td></tr></table></figure>\n<p>Example of how the function used to call mutation look like:</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { API, graphqlOperation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;aws-amplify&apos;</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { createTodo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;/graphql/mutations&apos;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> todo = {</span><br><span class=\"line\">\titem: <span class=\"hljs-string\">&apos;visit qualityology.com&apos;</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> update = <span class=\"hljs-keyword\">await</span> API.graphql(</span><br><span class=\"line\">            graphqlOperation(</span><br><span class=\"line\">                createTodo,</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    input: todo,</span><br><span class=\"line\">                },</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> res)</span><br><span class=\"line\">        .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;error, creating user&apos;</span>, error));</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;update&apos;</span>, update);</span><br></pre></td></tr></table></figure>\n\n\n\n\n",
            "tags": [
                "Server",
                "React",
                "API"
            ]
        },
        {
            "id": "https://www.qualityology.com/tech/build-extremely-fast-wordpress-gcp-part-2-nginx/",
            "url": "https://www.qualityology.com/tech/build-extremely-fast-wordpress-gcp-part-2-nginx/",
            "title": "Build an extremely fast WordPress with GCP Part 2: Nginx",
            "date_published": "2017-10-01T05:11:32.000Z",
            "content_html": "<p>Apache or Nginx, what softwares should be used to for your server to achieve the maximum performance? If you have a small free server from GCP from <a href=\"https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/\">part 1</a>, and you want it to be able to handle average 1000 clients per second, Nginx is the best option. Apache use more server resources and must be configured properly to get the best performance. Nginx can handle very large amount of traffic even in a limited environment. We have done the loading test with the server from Google Cloud Platform from <a href=\"https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/\">part 1</a>&#xA0;and the result was great without deep optimization. 1000 client/sec is not the maximum that this setup can get, it is the limit of the free test we could get. <img src=\"/2017/09/loading-test-result-28bbf2cfcf185cb53e2eba4440a4ca31.png\"> When we tried the same test using Apache, the test was aborted at the beginning because server crashed. That is why we will use Nginx. We are not the server expert, so we will not discuss how to optimize Apache to pass the same test. What we will need is NGINX + MySQL + PHP-FPM +&#xA0;Microcaching + WordPress.</p>\n<h2 id=\"Step-1-install-Nginx\"><a href=\"#Step-1-install-Nginx\" class=\"headerlink\" title=\"Step 1, install Nginx.\"></a>Step 1, install Nginx.</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\">sudo apt-get install nginx -y</span><br><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-2-install-Mysql-or-MariaDB\"><a href=\"#Step-2-install-Mysql-or-MariaDB\" class=\"headerlink\" title=\"Step 2, install Mysql (or MariaDB).\"></a>Step 2, install Mysql (or MariaDB).</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server -y</span><br><span class=\"line\">sudo service mysql stop</span><br><span class=\"line\">sudo mysql_install_db # follow instructions</span><br><span class=\"line\">sudo service mysql start</span><br><span class=\"line\">sudo mysql_secure_installation # follow instructions</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-3-install-Install-PHP-FPM\"><a href=\"#Step-3-install-Install-PHP-FPM\" class=\"headerlink\" title=\"Step 3, install Install PHP-FPM\"></a>Step 3, install Install PHP-FPM</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php-fpm php-mysql php-gd php-cli php-xml php-mbstring</span><br></pre></td></tr></table></figure>\n<p>Add cgi.fix_pathinfo=0 to php.ini, if you know how to add, jump to step 4, otherwise, continue below.</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># if you use different version of PHP, change 7.0 to your version e.g. 8.0</span><br><span class=\"line\">sudo nano /etc/php/7.0/fpm/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\"># paste cgi.fix_pathinfo=0</span><br><span class=\"line\"># press ctrl + X key, and type Y to save the file.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># restart PHP-FPM service</span><br><span class=\"line\"># if you use different version of PHP, change the 7.0 accordingly</span><br><span class=\"line\">sudo service php7.0-fpm restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-configure-Nginx-to-use-PHP-FPM-to-process-php-files\"><a href=\"#Step-4-configure-Nginx-to-use-PHP-FPM-to-process-php-files\" class=\"headerlink\" title=\"Step 4, configure Nginx to use PHP-FPM to process php files\"></a>Step 4, configure Nginx to use PHP-FPM to process php files</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/nginx/sites-available/default</span><br><span class=\"line\"></span><br><span class=\"line\"># add the following to the server { } block</span><br><span class=\"line\"></span><br><span class=\"line\">                location ~ \\.php$ {</span><br><span class=\"line\">                try_files $uri =404;</span><br><span class=\"line\">                fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">                fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</span><br><span class=\"line\">                fastcgi_index index.php;</span><br><span class=\"line\">                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">                include fastcgi_params;</span><br><span class=\"line\">                        }</span><br></pre></td></tr></table></figure>\n<p>Restart Nginx</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-5-add-Microcaching-to-Nginx\"><a href=\"#Step-5-add-Microcaching-to-Nginx\" class=\"headerlink\" title=\"Step 5, add Microcaching to Nginx\"></a>Step 5, add Microcaching to Nginx</h2><p>With Microcaching, Nginx can handle large amount of traffic because dynamic inquiries/files are cached to prevent overloading your database. For example if each client to your website generate 2 database inquiry, 1000 client will have 2000 inquires. If you set up cache for 5 seconds, 1000 clients within 5 seconds will only hit your database 2 times if both inquires are cached. That is the magic of this setup.</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># always backup the file you want to change</span><br><span class=\"line\">sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak</span><br><span class=\"line\">sudo nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<p>Add the following to the file. You can add this before the server {} block</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Microcaching</span><br><span class=\"line\">fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=qualityology-com:100m inactive=60m;</span><br><span class=\"line\">fastcgi_cache_key &quot;$scheme$request_method$host$request_uri&quot;;</span><br></pre></td></tr></table></figure>\n<p>Add the following to location ~ \\.php$ {} block. Below configuration will set the cache to expire after 10 seconds, and no cache for logged in users and commenters. You can change the 10s to longer time, but 10s is long enough for your need.</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Cache everything by default</span><br><span class=\"line\">set $no_cache 0;</span><br><span class=\"line\"></span><br><span class=\"line\">#Don&apos;t cache logged in users or commenters</span><br><span class=\"line\">if ( $http_cookie ~* &quot;comment_author_wordpress_(?!test_cookie)wp-postpass_&quot; ) {</span><br><span class=\"line\">        set $no_cache 1;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">#Don&apos;t cache the following URLs</span><br><span class=\"line\">if ($request_uri ~* &quot;/(wp-admin/wp-login.php)&quot;)</span><br><span class=\"line\">{</span><br><span class=\"line\">        set $no_cache 1;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">#matches keys_zone in fastcgi_cache_path</span><br><span class=\"line\">fastcgi_cache qualityology-com;</span><br><span class=\"line\"></span><br><span class=\"line\">#don&apos;t serve pages defined earlier</span><br><span class=\"line\">fastcgi_cache_bypass $no_cache;</span><br><span class=\"line\"></span><br><span class=\"line\">#don&apos;t cache pages defined earlier</span><br><span class=\"line\">fastcgi_no_cache $no_cache;</span><br><span class=\"line\"></span><br><span class=\"line\">#defines the default cache time</span><br><span class=\"line\">fastcgi_cache_valid any 10s;</span><br><span class=\"line\"></span><br><span class=\"line\">#unsure what the impacts of this variable is</span><br><span class=\"line\">fastcgi_max_temp_file_size 2M;</span><br><span class=\"line\"></span><br><span class=\"line\">#Use stale cache items while updating in the background</span><br><span class=\"line\">fastcgi_cache_use_stale updating error timeout invalid_header http_500;</span><br><span class=\"line\">fastcgi_cache_lock on;</span><br><span class=\"line\">fastcgi_cache_lock_timeout 10s;</span><br></pre></td></tr></table></figure>\n<p>Test if your configuration</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n<p>If no error, reload your Nginx or restart it</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-6-install-WordPress\"><a href=\"#Step-6-install-WordPress\" class=\"headerlink\" title=\"Step 6, install WordPress\"></a>Step 6, install WordPress</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/www/html/</span><br><span class=\"line\">sudo wget http://wordpress.org/latest.tar.gz</span><br><span class=\"line\">sudo tar xzvf latest.tar.gz</span><br><span class=\"line\">sudo rm latest.tar.gz</span><br><span class=\"line\">sudo mv wordpress/* ./</span><br><span class=\"line\">sudo chown -R www-data:www-data /var/www/html/*</span><br></pre></td></tr></table></figure>\n<p>You are all set. Now, open your domain or IP to setup WordPress</p>\n",
            "tags": [
                "WordPress",
                "Nginx",
                "Server"
            ]
        },
        {
            "id": "https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/",
            "url": "https://www.qualityology.com/tech/build-an-extremely-fast-wordpress-gcp-part1-server/",
            "title": "Build an extremely fast WordPress with GCP Part 1: server",
            "date_published": "2017-09-18T04:16:14.000Z",
            "content_html": "<p>Can you get a super fast server free from Google? Yes, you can. Google Cloud Platform has free tier for US region server. If you are building a small WordPress website using light bandwidth, the free tier is more than sufficient. Free tier provide 720 hours of instance usage which will cover whole month of usage. The only downside is if your site use a lot of bandwidth you will be billed after 1GB of free egress bandwidth, but still cheap because 1 GB cost only&#xA0;$0.01 for US and 1 TB $0.12 - $0.23 depends on the regions. Most new sites use only small amount of bandwidth. Ingress is free if you wonder. As of today, the free tier offer:</p>\n<blockquote>\n<ul>\n<li>  1 f1-micro instance per month (US regions only - Excluding Northern Virginia)</li>\n<li>  30 GB-months HDD, 5 GB-months snapshot</li>\n<li>  1 GB network egress from North America to all region destinations per month (excluding China and Australia)</li>\n</ul>\n</blockquote>\n<h2 id=\"Step-1-update-your-billing-info\"><a href=\"#Step-1-update-your-billing-info\" class=\"headerlink\" title=\"Step 1, update your billing info.\"></a>Step 1, update your billing info.</h2><p>Open <a href=\"https://console.cloud.google.com/billing\">https://console.cloud.google.com/billing</a>, update your billing info. You may be requested to create a project name.</p>\n<h2 id=\"Step-2-create-your-virtual-server-instance\"><a href=\"#Step-2-create-your-virtual-server-instance\" class=\"headerlink\" title=\"Step 2, create your virtual server (instance)\"></a>Step 2, create your virtual server (instance)</h2><p>Open <a href=\"https://console.cloud.google.com/compute\">https://console.cloud.google.com/compute</a> and click CREATE INSTANCE. <img src=\"/2017/09/create_instance-b838d66311ba7559ae40ad101f3b8bc2.png\"></p>\n<h2 id=\"Step-3-configure-your-server\"><a href=\"#Step-3-configure-your-server\" class=\"headerlink\" title=\"Step 3, configure&#xA0;your server.\"></a>Step 3, configure&#xA0;your server.</h2><p>Match the free tier configuration, do not click create&#xA0;yet after this step.</p>\n<ul>\n<li>  <strong>Zone</strong>: pick a US region. eg: us-west1-a</li>\n<li>  <strong>Machine type</strong>: micro (1 shared vCPU, 0.6 GB memory, f1-micro)</li>\n<li>  <strong>Boot disk</strong>: 30 GB standard persistent disk. SSD is not free!</li>\n<li>  <strong>OS images</strong>: pick one of your favor, or use&#xA0;Debian GNU/Linux 9 (stretch) as what we picked.</li>\n<li>  <strong>Firewall</strong>: check Allow HTTP traffic and Allow HTTPS traffic</li>\n</ul>\n<h2 id=\"Step-4-get-an-static-IP-for-your-instance\"><a href=\"#Step-4-get-an-static-IP-for-your-instance\" class=\"headerlink\" title=\"Step 4: get an static IP for your instance.\"></a>Step 4: get an static IP for your instance.</h2><p>Expand&#xA0;Management, disks, networking, SSH keys <img src=\"https://www.qualityology.com/2017/09/instance_config_micro-c43f1252c0868e29e21c7ae503c68747.png\"> Under Networking &gt;&gt; Network interfaces &gt;&gt; External IP, select Create IP address <img src=\"/2017/09/instance_static_ip-2dbd3c23a2bbbdf99ead0fdc9283e895.png\"> After you reserve an static external IP address, you can click Create to finish the instance setup. You have complete the step 1 and you have your&#xA0;free server from GCP, continue to <a href=\"https://www.qualityology.com/tech/build-extremely-fast-wordpress-gcp-part-2-nginx/\">part 2</a> when you ready.</p>\n",
            "tags": [
                "WordPress",
                "Nginx",
                "Server"
            ]
        }
    ]
}